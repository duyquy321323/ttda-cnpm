import { useEffect, useState } from "react";
import api from "../../api";
import BlueTempImg from "../../assets/img/BlueTemp.png";
import EnvironmentImg from "../../assets/img/Environment.png";
import HumidityImg from "../../assets/img/Humidity.png";
import LightImg from "../../assets/img/Light.png";
import RedTempImg from "../../assets/img/RedTemp.png";
import TemperatureImg from "../../assets/img/Temperature.png";
import Chart from "../../component/Chart";
import IntroComponent from "../../component/IntroComponent";
import Slide from "../../component/Slide";
import "./Environment.css";

const Environment = () => {
    const title = "M√¥i tr∆∞·ªùng";

    const [environmentData, setEnvironmentData] = useState({
        temperature: 0,
        humidity: 0,
        light: 0
    });
    

    const [temperatureData, setTemperatureData] = useState([]);
    const [humidityData, setHumidityData] = useState([]);
    const [lightData, setLightData] = useState([]);

    
    useEffect(() => {

        const ws = new WebSocket("ws://localhost:8080");

      

        ws.onopen = () => {

          console.log("üü¢ WebSocket connected");

        };

      

        ws.onmessage = (event) => {

          const data = JSON.parse(event.data);

          setEnvironmentData(data); 

        };

      

        ws.onclose = () => {

          console.log("üî¥ WebSocket disconnected");

        };

      

        return () => {

          ws.close();

        };

      }, []);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch("http://localhost:8080/environment");
                const data = await response.json();
                setEnvironmentData(data);
            } catch (error) {
                console.error("Error fetching environment data:", error);
            }
        };

        async function getTemperature24h() {
            try {
                const response = await api.get("/environment/temperature-24h");
                setTemperatureData(Array.from(response.data).map((item) => ({
                    value: item.temperature,
                    recorded_at: item.recorded_at,
                })));
            } catch (error) {
                console.error("Error fetching 24h temperature data:", error);
            }
        }

        async function getHumidity24h() {
            try {
                const response = await api.get("/environment/humidity-24h");
                setHumidityData(Array.from(response.data).map((item) => ({
                    value: item.humidity,
                    recorded_at: item.recorded_at,
                })));
            } catch (error) {
                console.error("Error fetching 24h humidity data:", error);
            }
        }

        async function getLight24h() {
            try {
                const response = await api.get("/environment/light-24h");
                setLightData(Array.from(response.data).map((item) => ({
                    value: item.light_level,
                    recorded_at: item.recorded_at,
                })));
            } catch (error) {
                console.error("Error fetching 24h light data:", error);
            }
        }

        getLight24h();
        getHumidity24h();
        getTemperature24h();
        fetchData();
        const interval = setInterval(fetchData, 500);

        return () => clearInterval(interval);
    }, [temperatureData, humidityData, lightData]);

    return (
        <div className="container--environment container--3p">
            <IntroComponent title={title} icon={EnvironmentImg} />

            <div className="container--slide">
                <div className="align-left">
                <div className="logo">
                        <img src={TemperatureImg} alt="Temperature" />
                    </div>
                    <div className="right">
                    <div className="top">
                    <p>Nhi·ªát ƒë·ªô: {Number(environmentData.temperature)?.toFixed(2)}¬∞C</p>
                    <div className="slide">
                        <img src={BlueTempImg} alt="BlueTemp" />
                        <Slide min={-40} max={80} value={environmentData.temperature}
                            color="linear-gradient(90deg, #00AEEF 0%, #FF3B30 100%)"
                            title="Temperature"
                        />
                        <img src={RedTempImg} alt="RedTemp" />
                    </div>

                    </div>
                    <div className="bottom">
                            {environmentData.temperature < 10 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô qu√° th·∫•p, c√≥ nguy c∆° c·∫£m l·∫°nh. H√£y gi·ªØ ·∫•m!
                                </span>
                            )}

                            {environmentData.temperature >= 10 && environmentData.temperature <= 25 && (
                                <span className="normal">
                                   TH√îNG B√ÅO: Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng, th·ªùi ti·∫øt d·ªÖ ch·ªãu.
                                </span>
                            )}

                            {environmentData.temperature > 25 && environmentData.temperature <= 35 && (
                                <span className="caution">
                                    TH√îNG B√ÅO: Th·ªùi ti·∫øt ·∫•m √°p, n√™n u·ªëng ƒë·ªß n∆∞·ªõc ƒë·ªÉ tr√°nh m·∫•t n∆∞·ªõc.
                                </span>
                            )}

                            {environmentData.temperature > 35 && environmentData.temperature <= 50 && (
                                <span className="danger">
                                    C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô cao, c√≥ nguy c∆° b·ªã say n·∫Øng. H√£y gi·ªØ m√°t v√† b·ªï sung n∆∞·ªõc!
                                </span>
                            )}

                            {environmentData.temperature > 50 && (
                                <span className="extreme-danger">
                                    NGUY HI·ªÇM: Nhi·ªát ƒë·ªô c·ª±c cao! T∆∞∆°ng ƒë∆∞∆°ng m√¥i tr∆∞·ªùng ƒëang ch√°y. H√£y t√¨m n∆°i an to√†n ngay!
                                </span>
                            )}
                        </div>
                        </div>
                </div>

                <div className="align-right">
                    <div className="left">
                        <div className="top">
                            <p>ƒê·ªô ·∫©m: {Number(environmentData.humidity)?.toFixed(2)}%</p>
                            <div className="slide">
                                <Slide min={0} max={100} value={environmentData.humidity}
                                    color="linear-gradient(90deg, #FF4015 0%, #34C759 30%, #00AEEF 60%, #9747FF 80%)"
                                    title="Humidity"
                                />
                            </div>
                        </div>
                        <div className="bottom">
                            {environmentData.humidity < 30 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO: Kh√¥ng kh√≠ qu√° kh√¥! C√≥ th·ªÉ g√¢y kh√¥ da, kh√≥ ch·ªãu khi h√¥ h·∫•p, tƒÉng nguy c∆° ch√°y n·ªï.
                                </span>
                            )}
                            {environmentData.humidity >= 30 && environmentData.humidity < 60 && (
                                <span className="warning">
                                    TH√îNG B√ÅO: M·ª©c l√Ω t∆∞·ªüng! Kh√¥ng kh√≠ t·ªët cho s·ª©c kh·ªèe v√† thi·∫øt b·ªã. 
                                </span>
                            )}
                            {environmentData.humidity >= 60 && environmentData.humidity < 80 && (
                                <span className="warning">
                                    TH√îNG B√ÅO: ƒê·ªô ·∫©m cao! C·∫©n th·∫≠n n·∫•m m·ªëc v√† vi khu·∫©n ph√°t tri·ªÉn. H√£y ki·ªÉm tra th√¥ng gi√≥, h√∫t ·∫©m n·∫øu c·∫ßn.
                                </span>
                            )}
                            {environmentData.humidity >= 80 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO:  Nguy hi·ªÉm! Kh√¥ng kh√≠ qu√° ·∫©m, d·ªÖ g√¢y ·∫©m m·ªëc, h∆∞ h·ªèng thi·∫øt b·ªã ƒëi·ªán t·ª≠.
                                </span>
                            )}
                        </div>
                    </div>
                    <div className="logo">
                        <img src={HumidityImg} alt="Humidity" />
                    </div>
                </div>

                <div className="align-left">
                    <div className="logo">
                        <img src={LightImg} alt="Light" />
                    </div>
                    <div className="right">
                        <div className="top">
                            <p>√Ånh s√°ng: {Number(environmentData.light)?.toFixed(2)}%</p>
                            <div className="slide">
                                <Slide min={0} max={100} value={environmentData.light}
                                    color="linear-gradient(90deg, #121212 0%, #FF3B30 10%, #34C759 30%, #00AEEF 70%, #FFC107 90%)"
                                    title="Light"
                                />
                            </div>
                        </div>
                        <div className="bottom">
                            {environmentData.light < 10 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO: C√≥ nguy c∆° g√¢y m·ªèi m·∫Øt v√† kh√¥ng an to√†n, c·∫ßn tƒÉng c∆∞·ªùng ƒë·ªô s√°ng.
                                </span>
                            )}

                            {/* 10 - 30% (ƒë·ªè): "C·∫¢NH B√ÅO: D·ªÖ g√¢y m·ªát m·ªèi khi ƒë·ªçc s√°ch ho·∫∑c l√†m vi·ªác trong th·ªùi gian d√†i." */}

                            {environmentData.light >= 10 && environmentData.light < 30 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO: D·ªÖ g√¢y m·ªát m·ªèi khi ƒë·ªçc s√°ch ho·∫∑c l√†m vi·ªác trong th·ªùi gian d√†i.
                                </span> 
                            )}

                            {environmentData.light >= 30 && environmentData.light < 70  && (
                                <span className="warning">
                                    TH√îNG B√ÅO: T·ªët.
                                </span> 
                            )}

                            {environmentData.light >= 70 && environmentData.light < 90 && (
                                <span className="warning">
                                    C·∫¢NH B√ÅO: C√≥ th·ªÉ g√¢y ch√≥i m·∫Øt n·∫øu duy tr√¨ trong th·ªùi gian d√†i.
                                </span> 
                            )}
                            
                            {environmentData.light >= 90 && (
                                <span className="warning">
                                    NGUY HI·ªÇM: C√≥ th·ªÉ g√¢y kh√≥ ch·ªãu v√† ·∫£nh h∆∞·ªüng ƒë·∫øn th·ªã l·ª±c, do ƒë√≥ n√™n ƒëi·ªÅu ch·ªânh ƒë·ªÉ gi·∫£m c∆∞·ªùng ƒë·ªô s√°ng n·∫øu c·∫ßn.
                                </span> 
                            )}

                        </div>
                    </div>
                </div>
            </div>
            <Chart name="Bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô" data={temperatureData}/>
            <Chart name="Bi·ªÉu ƒë·ªì ƒë·ªô ·∫©m" data={humidityData}/>
            <Chart name="Bi·ªÉu ƒë·ªì √°nh s√°ng" data={lightData}/>
        </div>
    );
};

export default Environment;
